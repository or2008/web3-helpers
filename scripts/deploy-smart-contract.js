const config = require('../config');
const Web3 = require('web3');
// const web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/'));

// const providerPath = `ws://127.0.0.1:8546`;
const providerPath = `wss://ropsten.infura.io/ws/v3/72f0ba01dbe842c083a0a0b0a76f29dc`;
const eventProvider = new Web3.providers.WebsocketProvider(providerPath);
const web3 = new Web3(eventProvider);
// ROPSTEN
const ownerAddress = '0x866E2c668b262aa0a783d4A79cf7d3373208fDdC';
const privateKey = '0xF78AA1859A74C8F856A42FC93A5823E8437DB0CBDBE623A446E735B7E9289ED1';

const abi = [{ outputs: [], inputs: [{ type: 'address', name: '_owner' }], constant: false, payable: false, type: 'constructor' }, { name: 'ethToTokenSwapInput', outputs: [{ type: 'uint256', name: 'out' }], inputs: [{ type: 'address', name: 'exchange_addr' }, { type: 'uint256', name: 'min_tokens' }, { type: 'uint256', name: 'deadline', unit: 'sec' }, { type: 'uint256', name: 'min_timestamp', unit: 'sec' }], constant: false, payable: true, type: 'function', gas: 36453 }, { name: 'tokenToEthSwapInput', outputs: [{ type: 'uint256', name: 'out', unit: 'wei' }], inputs: [{ type: 'address', name: 'exchange_addr' }, { type: 'uint256', name: 'tokens_sold' }, { type: 'uint256', name: 'min_eth', unit: 'wei' }, { type: 'uint256', name: 'deadline', unit: 'sec' }], constant: false, payable: false, type: 'function', gas: 7201 }, { name: 'withdraw', outputs: [], inputs: [], constant: false, payable: false, type: 'function', gas: 36415 }, { name: 'withdrawToken', outputs: [{ type: 'uint256', name: 'out' }], inputs: [{ type: 'address', name: 'token_addr' }], constant: false, payable: false, type: 'function', gas: 4261 }, { name: 'owner', outputs: [{ type: 'address', name: 'out' }], inputs: [], constant: true, payable: false, type: 'function', gas: 633 }];
const bytecode = '0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05260206105886101403934156100a757600080fd5b602061058860c03960c05160205181106100c057600080fd5b506101405160005561057056600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526000156100ba575b610160526101405260005461014051146100b457600080fd5b61016051565b63d849f9c8600051141561016a57608060046101403760043560205181106100e157600080fd5b506101a05142116100f157600080fd5b6000546101c052610140513b61010657600080fd5b6101405130141561011657600080fd5b60206102c0606463ad65d76d61020052610160516102205261018051610240526101c0516102605261021c34610140515af161015157600080fd5b6000506102c0516101e0526101e05160005260206000f3005b635ca903e16000511415610316576080600461014037341561018b57600080fd5b600435602051811061019c57600080fd5b50610140513b6101ab57600080fd5b610140513014156101bb57600080fd5b60206102406004639d76ea586101e0526101fc610140515afa6101dd57600080fd5b600050610240516101c0526101c0513b6101f657600080fd5b6101c05130141561020657600080fd5b6020610300604463095ea7b3610260526101405161028052610160516102a05261027c60006101c0515af161023a57600080fd5b600050610300506101c0513b61024f57600080fd5b6101c05130141561025f57600080fd5b60206103e060646323b872dd6103205233610340523061036052610160516103805261033c60006101c0515af161029557600080fd5b6000506103e050610140513b6102aa57600080fd5b610140513014156102ba57600080fd5b60206105006084637237e03161042052610160516104405261018051610460526101a051610480526000546104a05261043c6000610140515af16102fd57600080fd5b60005061050051610400526104005160005260206000f3005b633ccfd60b600051141561036857341561032f57600080fd5b63c022eb28610140523361016052610160516006580161009b565b600050600060006000600030316000546000f161036657600080fd5b005b63894760696000511415610477576020600461014037341561038957600080fd5b600435602051811061039a57600080fd5b506101405163c022eb28610160523361018052610180516006580161009b565b61014052600050610140513b6103cf57600080fd5b610140513014156103df57600080fd5b602061028060246370a0823161020052306102205261021c610140515afa61040657600080fd5b600050610280516101e052610140513b61041f57600080fd5b6101405130141561042f57600080fd5b6020610340604463a9059cbb6102a0526000546102c0526101e0516102e0526102bc6000610140515af161046257600080fd5b600050610340506101e05160005260206000f3005b638da5cb5b600051141561049d57341561049057600080fd5b60005460005260206000f3005b60006000fd5b6100cd610570036100cd6000396100cd610570036000f3';

web3.eth.accounts.wallet.add(privateKey);

const contract = new web3.eth.Contract(abi);

contract.deploy({
    data: bytecode,
    arguments: [ownerAddress]
}).send({
    from: ownerAddress,
    gas: 1500000,
    gasPrice: 1500000000
}, (err, txHash) => {
    console.log('send:', err, txHash);
}).on('error', error => {
    console.log('error', error);
}).on('transactionHash', transactionHash => {
    console.log('transactionHash', transactionHash);
}).on('receipt', receipt => {
    console.log('receipt', receipt.contractAddress);
}).on('confirmation', (confirmationNumber, receipt) => {
    console.log('confirmation', confirmationNumber);
});
